'''DECISION TREE'''
X = df[['2021 TR', '2022 TR', '2021 Inf', '2021 ED', '2022 ED', '2021 GHI', '2022 GHI']]
y = df['2022 Inf']

# Scale features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.3, random_state=42)

# Create pipeline with DecisionTreeRegressor
tree_reg = DecisionTreeRegressor(random_state=42)
pipeline = Pipeline(steps=[('regressor', tree_reg)])

# Define hyperparameters for grid search
parameters = {'regressor__max_depth': [3, 5, 7, 10],
              'regressor__min_samples_split': [2, 5, 10],
              'regressor__min_samples_leaf': [1, 2, 4],
              'regressor__max_features': ['sqrt', 'log2', None]}

# Create GridSearchCV object
grid_search = GridSearchCV(pipeline, parameters, cv=5, scoring='r2')

# Fit GridSearchCV object to training data
grid_search.fit(X_train, y_train)

# Print best hyperparameters and score
print("Best hyperparameters:", grid_search.best_params_)
print("Best score:", grid_search.best_score_)

# Use best model to predict on test data
y_pred = grid_search.predict(X_test)

# Evaluate performance of best model
r2_score = r2_score(y_test, y_pred)
print("Decision Tree R^2 score:", r2_score)